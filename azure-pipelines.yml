variables:
  configuration: Release
  platform: x64

resources:
- repo: self
  fetchDepth: 5

stages:
- stage: ClangFormat
  jobs:
  - job: ClangFormat
    pool:
      vmImage: Ubuntu-20.04

    variables:
      CC: gcc
      CXX: g++

    steps:
    - bash: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install clang-format-9 ninja-build python3
      displayName: 'Install'
    - task: PythonScript@0
      displayName: 'Build'
      inputs:
        scriptPath: BuildAll.py
        arguments: 'ninja gcc linux clangformat'
    - script: |
        git diff --exit-code $(Build.SourceVersion)
      failOnStderr: true
      displayName: 'Clang-Format'

- stage: Build
  condition: succeeded('ClangFormat')
  jobs:

  # - job: Windows_vc142_x64
  #   pool:
  #     vmImage: windows-2019

  #   variables:
  #     compiler: vc142
  #     combination: 'win-$(compiler)-$(platform)-$(configuration)'
  #     buildFolder: 'Build/ninja-$(combination)'
  #     installCommand: 'choco install ninja'
  #     testCommand: './$(buildFolder)/Bin/ShaderConductorTest.exe'
  #     artifactBinaries: |
  #       Bin/ShaderConductor.dll
  #       Bin/ShaderConductorCmd.exe
  #       Bin/dxcompiler.dll
  #       Bin/ShaderConductorWrapper.dll
  #       Lib/ShaderConductor.lib
  #       **/*.dll

  #   steps:
  #   - template: CI/AzurePipelines/ContinuousBuild.yml

  - job: Linux_clang13
    pool:
      vmImage: Ubuntu-20.04

    variables:
      compiler: clang13
      combination: 'linux-$(compiler)-$(platform)-$(configuration)'
      buildFolder: 'Build/ninja-$(combination)'
      installCommand: |
        wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-13 main"
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install clang-13 libc++-13-dev libc++abi-13-dev lld-13 ninja-build python3
      testCommand: './$(buildFolder)/Bin/ShaderConductorTest'
      artifactBinaries: |
        Bin/ShaderConductorCmd
        Lib/libdxcompiler.so
        Lib/libShaderConductor.so
        Lib/libShaderConductorWrapper.so
        **/*.so
        **/*.3.7
      CC: clang-13
      CXX: clang++-13

    steps:
    - template: CI/AzurePipelines/ContinuousBuild.yml

  # - job: macOS_10_clang
  #   pool:
  #     vmImage: macOS-11

  #   variables:
  #     compiler: clang9
  #     combination: 'osx-$(compiler)-$(platform)-$(configuration)'
  #     buildFolder: 'Build/ninja-$(combination)'
  #     installCommand: |
  #       brew update
  #       brew install ninja
  #     testCommand: './$(buildFolder)/Bin/ShaderConductorTest'
  #     artifactBinaries: |
  #       Bin/ShaderConductorCmd
  #       Lib/libdxcompiler.dylib
  #       Lib/libShaderConductor.dylib
  #       Lib/libShaderConductorWrapper.dylib
  #       **/*.dylib
  #     CC: clang
  #     CXX: clang++

  #   steps:
  #   - template: CI/AzurePipelines/ContinuousBuild.yml
